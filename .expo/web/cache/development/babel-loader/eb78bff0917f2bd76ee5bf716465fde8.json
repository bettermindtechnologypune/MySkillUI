{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _assertThisInitialized2 = _interopRequireDefault(require(\"@babel/runtime/helpers/assertThisInitialized\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _react = _interopRequireWildcard(require(\"react\"));\n\nvar _reactNative = require(\"react-native\");\n\nvar _package = _interopRequireDefault(require(\"react-native/package.json\"));\n\nvar _line = _interopRequireDefault(require(\"../line\"));\n\nvar _label = _interopRequireDefault(require(\"../label\"));\n\nvar _affix = _interopRequireDefault(require(\"../affix\"));\n\nvar _helper = _interopRequireDefault(require(\"../helper\"));\n\nvar _counter = _interopRequireDefault(require(\"../counter\"));\n\nvar _styles = _interopRequireDefault(require(\"./styles.js\"));\n\nvar _excluded = [\"style\", \"label\", \"title\", \"value\", \"defaultValue\", \"characterRestriction\", \"editable\", \"disabled\", \"disabledLineType\", \"disabledLineWidth\", \"animationDuration\", \"fontSize\", \"titleFontSize\", \"labelFontSize\", \"labelHeight\", \"labelPadding\", \"inputContainerPadding\", \"labelTextStyle\", \"titleTextStyle\", \"tintColor\", \"baseColor\", \"textColor\", \"errorColor\", \"lineWidth\", \"activeLineWidth\", \"containerStyle\", \"inputContainerStyle\", \"clearTextOnFocus\"];\nvar _jsxFileName = \"E:\\\\Vijay_S\\\\Paresh\\\\ReactNativeApp\\\\node_modules\\\\react-native-material-textfield\\\\src\\\\components\\\\field\\\\index.js\";\n\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\n\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nvar TextField = function (_PureComponent) {\n  (0, _inherits2.default)(TextField, _PureComponent);\n\n  var _super = _createSuper(TextField);\n\n  function TextField(props) {\n    var _this;\n\n    (0, _classCallCheck2.default)(this, TextField);\n    _this = _super.call(this, props);\n    _this.onBlur = _this.onBlur.bind((0, _assertThisInitialized2.default)(_this));\n    _this.onFocus = _this.onFocus.bind((0, _assertThisInitialized2.default)(_this));\n    _this.onPress = _this.focus.bind((0, _assertThisInitialized2.default)(_this));\n    _this.onChange = _this.onChange.bind((0, _assertThisInitialized2.default)(_this));\n    _this.onChangeText = _this.onChangeText.bind((0, _assertThisInitialized2.default)(_this));\n    _this.onContentSizeChange = _this.onContentSizeChange.bind((0, _assertThisInitialized2.default)(_this));\n    _this.onFocusAnimationEnd = _this.onFocusAnimationEnd.bind((0, _assertThisInitialized2.default)(_this));\n    _this.updateRef = _this.updateRef.bind((0, _assertThisInitialized2.default)(_this), 'input');\n    var _this$props = _this.props,\n        value = _this$props.value,\n        error = _this$props.error,\n        fontSize = _this$props.fontSize;\n    _this.mounted = false;\n    _this.state = {\n      text: value,\n      focus: new _reactNative.Animated.Value(_this.focusState(error, false)),\n      focused: false,\n      receivedFocus: false,\n      error: error,\n      errored: !!error,\n      height: fontSize * 1.5\n    };\n    return _this;\n  }\n\n  (0, _createClass2.default)(TextField, [{\n    key: \"componentWillReceiveProps\",\n    value: function componentWillReceiveProps(props) {\n      var error = this.state.error;\n\n      if (null != props.value) {\n        this.setState({\n          text: props.value\n        });\n      }\n\n      if (props.error && props.error !== error) {\n        this.setState({\n          error: props.error\n        });\n      }\n\n      if (props.error !== this.props.error) {\n        this.setState({\n          errored: !!props.error\n        });\n      }\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.mounted = true;\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.mounted = false;\n    }\n  }, {\n    key: \"componentWillUpdate\",\n    value: function componentWillUpdate(props, state) {\n      var _this$props2 = this.props,\n          error = _this$props2.error,\n          duration = _this$props2.animationDuration;\n      var _this$state = this.state,\n          focus = _this$state.focus,\n          focused = _this$state.focused;\n\n      if (props.error !== error || focused ^ state.focused) {\n        var toValue = this.focusState(props.error, state.focused);\n\n        _reactNative.Animated.timing(focus, {\n          toValue: toValue,\n          duration: duration\n        }).start(this.onFocusAnimationEnd);\n      }\n    }\n  }, {\n    key: \"updateRef\",\n    value: function updateRef(name, ref) {\n      this[name] = ref;\n    }\n  }, {\n    key: \"focusState\",\n    value: function focusState(error, focused) {\n      return error ? -1 : focused ? 1 : 0;\n    }\n  }, {\n    key: \"focus\",\n    value: function focus() {\n      var _this$props3 = this.props,\n          disabled = _this$props3.disabled,\n          editable = _this$props3.editable;\n\n      if (!disabled && editable) {\n        this.input.focus();\n      }\n    }\n  }, {\n    key: \"blur\",\n    value: function blur() {\n      this.input.blur();\n    }\n  }, {\n    key: \"clear\",\n    value: function clear() {\n      this.input.clear();\n      this.onChangeText('');\n    }\n  }, {\n    key: \"value\",\n    value: function value() {\n      var _this$state2 = this.state,\n          text = _this$state2.text,\n          receivedFocus = _this$state2.receivedFocus;\n      var _this$props4 = this.props,\n          value = _this$props4.value,\n          defaultValue = _this$props4.defaultValue;\n      return receivedFocus || null != value || null == defaultValue ? text : defaultValue;\n    }\n  }, {\n    key: \"isFocused\",\n    value: function isFocused() {\n      return this.input.isFocused();\n    }\n  }, {\n    key: \"isRestricted\",\n    value: function isRestricted() {\n      var characterRestriction = this.props.characterRestriction;\n      var _this$state$text = this.state.text,\n          text = _this$state$text === void 0 ? '' : _this$state$text;\n      return characterRestriction < text.length;\n    }\n  }, {\n    key: \"onFocus\",\n    value: function onFocus(event) {\n      var _this$props5 = this.props,\n          onFocus = _this$props5.onFocus,\n          clearTextOnFocus = _this$props5.clearTextOnFocus;\n\n      if ('function' === typeof onFocus) {\n        onFocus(event);\n      }\n\n      if (clearTextOnFocus) {\n        this.clear();\n      }\n\n      this.setState({\n        focused: true,\n        receivedFocus: true\n      });\n    }\n  }, {\n    key: \"onBlur\",\n    value: function onBlur(event) {\n      var onBlur = this.props.onBlur;\n\n      if ('function' === typeof onBlur) {\n        onBlur(event);\n      }\n\n      this.setState({\n        focused: false\n      });\n    }\n  }, {\n    key: \"onChange\",\n    value: function onChange(event) {\n      var _this$props6 = this.props,\n          onChange = _this$props6.onChange,\n          multiline = _this$props6.multiline;\n\n      if ('function' === typeof onChange) {\n        onChange(event);\n      }\n\n      if (multiline && 'android' === _reactNative.Platform.OS) {\n        if (/^0\\.4[45]\\./.test(_package.default.version)) {\n          this.onContentSizeChange(event);\n        }\n      }\n    }\n  }, {\n    key: \"onChangeText\",\n    value: function onChangeText(text) {\n      var onChangeText = this.props.onChangeText;\n      this.setState({\n        text: text\n      });\n\n      if ('function' === typeof onChangeText) {\n        onChangeText(text);\n      }\n    }\n  }, {\n    key: \"onContentSizeChange\",\n    value: function onContentSizeChange(event) {\n      var _this$props7 = this.props,\n          onContentSizeChange = _this$props7.onContentSizeChange,\n          fontSize = _this$props7.fontSize;\n      var height = event.nativeEvent.contentSize.height;\n\n      if ('function' === typeof onContentSizeChange) {\n        onContentSizeChange(event);\n      }\n\n      this.setState({\n        height: Math.max(fontSize * 1.5, Math.ceil(height) + _reactNative.Platform.select({\n          ios: 5,\n          android: 1\n        }))\n      });\n    }\n  }, {\n    key: \"onFocusAnimationEnd\",\n    value: function onFocusAnimationEnd() {\n      if (this.mounted) {\n        this.setState(function (state, _ref) {\n          var error = _ref.error;\n          return {\n            error: error\n          };\n        });\n      }\n    }\n  }, {\n    key: \"renderAccessory\",\n    value: function renderAccessory() {\n      var renderAccessory = this.props.renderAccessory;\n\n      if ('function' !== typeof renderAccessory) {\n        return null;\n      }\n\n      return _react.default.createElement(_reactNative.View, {\n        style: _styles.default.accessory,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 291,\n          columnNumber: 7\n        }\n      }, renderAccessory());\n    }\n  }, {\n    key: \"renderAffix\",\n    value: function renderAffix(type, active, focused) {\n      var _this$props8 = this.props,\n          affix = _this$props8[type],\n          fontSize = _this$props8.fontSize,\n          baseColor = _this$props8.baseColor,\n          animationDuration = _this$props8.animationDuration,\n          affixTextStyle = _this$props8.affixTextStyle;\n\n      if (null == affix) {\n        return null;\n      }\n\n      var props = {\n        type: type,\n        active: active,\n        focused: focused,\n        fontSize: fontSize,\n        baseColor: baseColor,\n        animationDuration: animationDuration\n      };\n      return _react.default.createElement(_affix.default, (0, _extends2.default)({\n        style: affixTextStyle\n      }, props, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 320,\n          columnNumber: 7\n        }\n      }), affix);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$state3 = this.state,\n          receivedFocus = _this$state3.receivedFocus,\n          focus = _this$state3.focus,\n          focused = _this$state3.focused,\n          error = _this$state3.error,\n          errored = _this$state3.errored,\n          height = _this$state3.height,\n          _this$state3$text = _this$state3.text,\n          text = _this$state3$text === void 0 ? '' : _this$state3$text;\n      var _this$props9 = this.props,\n          inputStyleOverrides = _this$props9.style,\n          label = _this$props9.label,\n          title = _this$props9.title,\n          value = _this$props9.value,\n          defaultValue = _this$props9.defaultValue,\n          limit = _this$props9.characterRestriction,\n          editable = _this$props9.editable,\n          disabled = _this$props9.disabled,\n          disabledLineType = _this$props9.disabledLineType,\n          disabledLineWidth = _this$props9.disabledLineWidth,\n          animationDuration = _this$props9.animationDuration,\n          fontSize = _this$props9.fontSize,\n          titleFontSize = _this$props9.titleFontSize,\n          labelFontSize = _this$props9.labelFontSize,\n          labelHeight = _this$props9.labelHeight,\n          labelPadding = _this$props9.labelPadding,\n          inputContainerPadding = _this$props9.inputContainerPadding,\n          labelTextStyle = _this$props9.labelTextStyle,\n          titleTextStyle = _this$props9.titleTextStyle,\n          tintColor = _this$props9.tintColor,\n          baseColor = _this$props9.baseColor,\n          textColor = _this$props9.textColor,\n          errorColor = _this$props9.errorColor,\n          lineWidth = _this$props9.lineWidth,\n          activeLineWidth = _this$props9.activeLineWidth,\n          containerStyle = _this$props9.containerStyle,\n          inputContainerStyleOverrides = _this$props9.inputContainerStyle,\n          clearTextOnFocus = _this$props9.clearTextOnFocus,\n          props = (0, _objectWithoutProperties2.default)(_this$props9, _excluded);\n\n      if (props.multiline && props.height) {\n        height = props.height;\n      }\n\n      var defaultVisible = !(receivedFocus || null != value || null == defaultValue);\n      value = defaultVisible ? defaultValue : text;\n      var active = !!(value || props.placeholder);\n      var count = value.length;\n      var restricted = limit < count;\n      var textAlign = _reactNative.I18nManager.isRTL ? 'right' : 'left';\n      var borderBottomColor = restricted ? errorColor : focus.interpolate({\n        inputRange: [-1, 0, 1],\n        outputRange: [errorColor, baseColor, tintColor]\n      });\n      var borderBottomWidth = restricted ? activeLineWidth : focus.interpolate({\n        inputRange: [-1, 0, 1],\n        outputRange: [activeLineWidth, lineWidth, activeLineWidth]\n      });\n      var inputContainerStyle = (0, _extends2.default)({\n        paddingTop: labelHeight,\n        paddingBottom: inputContainerPadding\n      }, disabled ? {\n        overflow: 'hidden'\n      } : {\n        borderBottomColor: borderBottomColor,\n        borderBottomWidth: borderBottomWidth\n      }, props.multiline ? {\n        height: 'web' === _reactNative.Platform.OS ? 'auto' : labelHeight + inputContainerPadding + height\n      } : {\n        height: labelHeight + inputContainerPadding + fontSize * 1.5\n      });\n      var inputStyle = (0, _extends2.default)({\n        fontSize: fontSize,\n        textAlign: textAlign,\n        color: disabled || defaultVisible ? baseColor : textColor\n      }, props.multiline ? (0, _extends2.default)({\n        height: fontSize * 1.5 + height\n      }, _reactNative.Platform.select({\n        ios: {\n          top: -1\n        },\n        android: {\n          textAlignVertical: 'top'\n        }\n      })) : {\n        height: fontSize * 1.5\n      });\n      var errorStyle = {\n        color: errorColor,\n        opacity: focus.interpolate({\n          inputRange: [-1, 0, 1],\n          outputRange: [1, 0, 0]\n        }),\n        fontSize: title ? titleFontSize : focus.interpolate({\n          inputRange: [-1, 0, 1],\n          outputRange: [titleFontSize, 0, 0]\n        })\n      };\n      var titleStyle = {\n        color: baseColor,\n        opacity: focus.interpolate({\n          inputRange: [-1, 0, 1],\n          outputRange: [0, 1, 1]\n        }),\n        fontSize: titleFontSize\n      };\n      var helperContainerStyle = {\n        flexDirection: 'row',\n        height: title || limit ? titleFontSize * 2 : focus.interpolate({\n          inputRange: [-1, 0, 1],\n          outputRange: [titleFontSize * 2, 8, 8]\n        })\n      };\n      var containerProps = {\n        style: containerStyle,\n        onStartShouldSetResponder: function onStartShouldSetResponder() {\n          return true;\n        },\n        onResponderRelease: this.onPress,\n        pointerEvents: !disabled && editable ? 'auto' : 'none'\n      };\n      var inputContainerProps = {\n        style: [_styles.default.inputContainer, inputContainerStyle, inputContainerStyleOverrides]\n      };\n      var lineProps = {\n        type: disabledLineType,\n        width: disabledLineWidth,\n        color: baseColor\n      };\n      var labelProps = {\n        baseSize: labelHeight,\n        basePadding: labelPadding,\n        fontSize: fontSize,\n        activeFontSize: labelFontSize,\n        tintColor: tintColor,\n        baseColor: baseColor,\n        errorColor: errorColor,\n        animationDuration: animationDuration,\n        active: active,\n        focused: focused,\n        errored: errored,\n        restricted: restricted,\n        style: labelTextStyle\n      };\n      var counterProps = {\n        baseColor: baseColor,\n        errorColor: errorColor,\n        count: count,\n        limit: limit,\n        fontSize: titleFontSize,\n        style: titleTextStyle\n      };\n      return _react.default.createElement(_reactNative.View, (0, _extends2.default)({}, containerProps, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 510,\n          columnNumber: 7\n        }\n      }), _react.default.createElement(_reactNative.Animated.View, (0, _extends2.default)({}, inputContainerProps, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 511,\n          columnNumber: 9\n        }\n      }), disabled && _react.default.createElement(_line.default, (0, _extends2.default)({}, lineProps, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 512,\n          columnNumber: 24\n        }\n      })), _react.default.createElement(_label.default, (0, _extends2.default)({}, labelProps, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 514,\n          columnNumber: 11\n        }\n      }), label), _react.default.createElement(_reactNative.View, {\n        style: _styles.default.row,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 516,\n          columnNumber: 11\n        }\n      }, this.renderAffix('prefix', active, focused), _react.default.createElement(_reactNative.TextInput, (0, _extends2.default)({\n        style: [_styles.default.input, inputStyle, inputStyleOverrides],\n        selectionColor: tintColor\n      }, props, {\n        editable: !disabled && editable,\n        onChange: this.onChange,\n        onChangeText: this.onChangeText,\n        onContentSizeChange: this.onContentSizeChange,\n        onFocus: this.onFocus,\n        onBlur: this.onBlur,\n        value: value,\n        ref: this.updateRef,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 519,\n          columnNumber: 13\n        }\n      })), this.renderAffix('suffix', active, focused), this.renderAccessory())), _react.default.createElement(_reactNative.Animated.View, {\n        style: helperContainerStyle,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 540,\n          columnNumber: 9\n        }\n      }, _react.default.createElement(_reactNative.View, {\n        style: _styles.default.flex,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 541,\n          columnNumber: 11\n        }\n      }, _react.default.createElement(_helper.default, {\n        style: [errorStyle, titleTextStyle],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 542,\n          columnNumber: 13\n        }\n      }, error), _react.default.createElement(_helper.default, {\n        style: [titleStyle, titleTextStyle],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 543,\n          columnNumber: 13\n        }\n      }, title)), _react.default.createElement(_counter.default, (0, _extends2.default)({}, counterProps, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 546,\n          columnNumber: 11\n        }\n      }))));\n    }\n  }]);\n  return TextField;\n}(_react.PureComponent);\n\nexports.default = TextField;\nTextField.defaultProps = {\n  underlineColorAndroid: 'transparent',\n  disableFullscreenUI: true,\n  autoCapitalize: 'sentences',\n  editable: true,\n  animationDuration: 225,\n  fontSize: 16,\n  titleFontSize: 12,\n  labelFontSize: 12,\n  labelHeight: 32,\n  labelPadding: 4,\n  inputContainerPadding: 8,\n  tintColor: 'rgb(0, 145, 234)',\n  textColor: 'rgba(0, 0, 0, .87)',\n  baseColor: 'rgba(0, 0, 0, .38)',\n  errorColor: 'rgb(213, 0, 0)',\n  lineWidth: _reactNative.StyleSheet.hairlineWidth,\n  activeLineWidth: 2,\n  disabled: false,\n  disabledLineType: 'dotted',\n  disabledLineWidth: 1\n};\nTextField.propTypes = (0, _extends2.default)({}, _reactNative.TextInput.propTypes, {\n  animationDuration: _propTypes.default.number,\n  fontSize: _propTypes.default.number,\n  titleFontSize: _propTypes.default.number,\n  labelFontSize: _propTypes.default.number,\n  labelHeight: _propTypes.default.number,\n  labelPadding: _propTypes.default.number,\n  inputContainerPadding: _propTypes.default.number,\n  labelTextStyle: _reactNative.Text.propTypes.style,\n  titleTextStyle: _reactNative.Text.propTypes.style,\n  affixTextStyle: _reactNative.Text.propTypes.style,\n  tintColor: _propTypes.default.string,\n  textColor: _propTypes.default.string,\n  baseColor: _propTypes.default.string,\n  label: _propTypes.default.string.isRequired,\n  title: _propTypes.default.string,\n  characterRestriction: _propTypes.default.number,\n  error: _propTypes.default.string,\n  errorColor: _propTypes.default.string,\n  lineWidth: _propTypes.default.number,\n  activeLineWidth: _propTypes.default.number,\n  disabled: _propTypes.default.bool,\n  disabledLineType: _line.default.propTypes.type,\n  disabledLineWidth: _propTypes.default.number,\n  renderAccessory: _propTypes.default.func,\n  prefix: _propTypes.default.string,\n  suffix: _propTypes.default.string,\n  containerStyle: (_reactNative.ViewPropTypes || _reactNative.View.propTypes).style,\n  inputContainerStyle: (_reactNative.ViewPropTypes || _reactNative.View.propTypes).style\n});","map":{"version":3,"sources":["E:/Vijay_S/Paresh/ReactNativeApp/node_modules/react-native-material-textfield/src/components/field/index.js"],"names":["TextField","props","onBlur","bind","onFocus","onPress","focus","onChange","onChangeText","onContentSizeChange","onFocusAnimationEnd","updateRef","value","error","fontSize","mounted","state","text","Animated","Value","focusState","focused","receivedFocus","errored","height","setState","duration","animationDuration","toValue","timing","start","name","ref","disabled","editable","input","blur","clear","defaultValue","isFocused","characterRestriction","length","event","clearTextOnFocus","multiline","Platform","OS","test","RN","version","nativeEvent","contentSize","Math","max","ceil","select","ios","android","renderAccessory","styles","accessory","type","active","affix","baseColor","affixTextStyle","inputStyleOverrides","style","label","title","limit","disabledLineType","disabledLineWidth","titleFontSize","labelFontSize","labelHeight","labelPadding","inputContainerPadding","labelTextStyle","titleTextStyle","tintColor","textColor","errorColor","lineWidth","activeLineWidth","containerStyle","inputContainerStyleOverrides","inputContainerStyle","defaultVisible","placeholder","count","restricted","textAlign","I18nManager","isRTL","borderBottomColor","interpolate","inputRange","outputRange","borderBottomWidth","paddingTop","paddingBottom","overflow","inputStyle","color","top","textAlignVertical","errorStyle","opacity","titleStyle","helperContainerStyle","flexDirection","containerProps","onStartShouldSetResponder","onResponderRelease","pointerEvents","inputContainerProps","inputContainer","lineProps","width","labelProps","baseSize","basePadding","activeFontSize","counterProps","row","renderAffix","flex","PureComponent","defaultProps","underlineColorAndroid","disableFullscreenUI","autoCapitalize","StyleSheet","hairlineWidth","propTypes","TextInput","PropTypes","number","Text","string","isRequired","bool","Line","func","prefix","suffix","ViewPropTypes","View"],"mappings":"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","sourcesContent":["import PropTypes from 'prop-types';\nimport React, { PureComponent } from 'react';\nimport {\n  View,\n  Text,\n  TextInput,\n  Animated,\n  StyleSheet,\n  Platform,\n  ViewPropTypes,\n  I18nManager,\n} from 'react-native';\n\nimport RN from 'react-native/package.json';\n\nimport Line from '../line';\nimport Label from '../label';\nimport Affix from '../affix';\nimport Helper from '../helper';\nimport Counter from '../counter';\n\nimport styles from './styles.js';\n\nexport default class TextField extends PureComponent {\n  static defaultProps = {\n    underlineColorAndroid: 'transparent',\n    disableFullscreenUI: true,\n    autoCapitalize: 'sentences',\n    editable: true,\n\n    animationDuration: 225,\n\n    fontSize: 16,\n    titleFontSize: 12,\n    labelFontSize: 12,\n    labelHeight: 32,\n    labelPadding: 4,\n    inputContainerPadding: 8,\n\n    tintColor: 'rgb(0, 145, 234)',\n    textColor: 'rgba(0, 0, 0, .87)',\n    baseColor: 'rgba(0, 0, 0, .38)',\n\n    errorColor: 'rgb(213, 0, 0)',\n\n    lineWidth: StyleSheet.hairlineWidth,\n    activeLineWidth: 2,\n\n    disabled: false,\n    disabledLineType: 'dotted',\n    disabledLineWidth: 1,\n  };\n\n  static propTypes = {\n    ...TextInput.propTypes,\n\n    animationDuration: PropTypes.number,\n\n    fontSize: PropTypes.number,\n    titleFontSize: PropTypes.number,\n    labelFontSize: PropTypes.number,\n    labelHeight: PropTypes.number,\n    labelPadding: PropTypes.number,\n    inputContainerPadding: PropTypes.number,\n\n    labelTextStyle: Text.propTypes.style,\n    titleTextStyle: Text.propTypes.style,\n    affixTextStyle: Text.propTypes.style,\n\n    tintColor: PropTypes.string,\n    textColor: PropTypes.string,\n    baseColor: PropTypes.string,\n\n    label: PropTypes.string.isRequired,\n    title: PropTypes.string,\n\n    characterRestriction: PropTypes.number,\n\n    error: PropTypes.string,\n    errorColor: PropTypes.string,\n\n    lineWidth: PropTypes.number,\n    activeLineWidth: PropTypes.number,\n\n    disabled: PropTypes.bool,\n    disabledLineType: Line.propTypes.type,\n    disabledLineWidth: PropTypes.number,\n\n    renderAccessory: PropTypes.func,\n\n    prefix: PropTypes.string,\n    suffix: PropTypes.string,\n\n    containerStyle: (ViewPropTypes || View.propTypes).style,\n    inputContainerStyle: (ViewPropTypes || View.propTypes).style,\n  };\n\n  constructor(props) {\n    super(props);\n\n    this.onBlur = this.onBlur.bind(this);\n    this.onFocus = this.onFocus.bind(this);\n    this.onPress = this.focus.bind(this);\n    this.onChange = this.onChange.bind(this);\n    this.onChangeText = this.onChangeText.bind(this);\n    this.onContentSizeChange = this.onContentSizeChange.bind(this);\n    this.onFocusAnimationEnd = this.onFocusAnimationEnd.bind(this);\n\n    this.updateRef = this.updateRef.bind(this, 'input');\n\n    let { value, error, fontSize } = this.props;\n\n    this.mounted = false;\n    this.state = {\n      text: value,\n\n      focus: new Animated.Value(this.focusState(error, false)),\n      focused: false,\n      receivedFocus: false,\n\n      error: error,\n      errored: !!error,\n\n      height: fontSize * 1.5,\n    };\n  }\n\n  componentWillReceiveProps(props) {\n    let { error } = this.state;\n\n    if (null != props.value) {\n      this.setState({ text: props.value });\n    }\n\n    if (props.error && props.error !== error) {\n      this.setState({ error: props.error });\n    }\n\n    if (props.error !== this.props.error) {\n      this.setState({ errored: !!props.error });\n    }\n  }\n\n  componentDidMount() {\n    this.mounted = true;\n  }\n\n  componentWillUnmount() {\n    this.mounted = false;\n  }\n\n  componentWillUpdate(props, state) {\n    let { error, animationDuration: duration } = this.props;\n    let { focus, focused } = this.state;\n\n    if (props.error !== error || focused ^ state.focused) {\n      let toValue = this.focusState(props.error, state.focused);\n\n      Animated\n        .timing(focus, { toValue, duration })\n        .start(this.onFocusAnimationEnd);\n    }\n  }\n\n  updateRef(name, ref) {\n    this[name] = ref;\n  }\n\n  focusState(error, focused) {\n    return error? -1 : (focused? 1 : 0);\n  }\n\n  focus() {\n    let { disabled, editable } = this.props;\n\n    if (!disabled && editable) {\n      this.input.focus();\n    }\n  }\n\n  blur() {\n    this.input.blur();\n  }\n\n  clear() {\n    this.input.clear();\n\n    /* onChangeText is not triggered by .clear() */\n    this.onChangeText('');\n  }\n\n  value() {\n    let { text, receivedFocus } = this.state;\n    let { value, defaultValue } = this.props;\n\n    return (receivedFocus || null != value || null == defaultValue)?\n      text:\n      defaultValue;\n  }\n\n  isFocused() {\n    return this.input.isFocused();\n  }\n\n  isRestricted() {\n    let { characterRestriction } = this.props;\n    let { text = '' } = this.state;\n\n    return characterRestriction < text.length;\n  }\n\n  onFocus(event) {\n    let { onFocus, clearTextOnFocus } = this.props;\n\n    if ('function' === typeof onFocus) {\n      onFocus(event);\n    }\n\n    if (clearTextOnFocus) {\n      this.clear();\n    }\n\n    this.setState({ focused: true, receivedFocus: true });\n  }\n\n  onBlur(event) {\n    let { onBlur } = this.props;\n\n    if ('function' === typeof onBlur) {\n      onBlur(event);\n    }\n\n    this.setState({ focused: false });\n  }\n\n  onChange(event) {\n    let { onChange, multiline } = this.props;\n\n    if ('function' === typeof onChange) {\n      onChange(event);\n    }\n\n    /* XXX: onContentSizeChange is not called on RN 0.44 and 0.45 */\n    if (multiline && 'android' === Platform.OS) {\n      if (/^0\\.4[45]\\./.test(RN.version)) {\n        this.onContentSizeChange(event);\n      }\n    }\n  }\n\n  onChangeText(text) {\n    let { onChangeText } = this.props;\n\n    this.setState({ text });\n\n    if ('function' === typeof onChangeText) {\n      onChangeText(text);\n    }\n  }\n\n  onContentSizeChange(event) {\n    let { onContentSizeChange, fontSize } = this.props;\n    let { height } = event.nativeEvent.contentSize;\n\n    if ('function' === typeof onContentSizeChange) {\n      onContentSizeChange(event);\n    }\n\n    this.setState({\n      height: Math.max(\n        fontSize * 1.5,\n        Math.ceil(height) + Platform.select({ ios: 5, android: 1 })\n      ),\n    });\n  }\n\n  onFocusAnimationEnd() {\n    if (this.mounted) {\n      this.setState((state, { error }) => ({ error }));\n    }\n  }\n\n  renderAccessory() {\n    let { renderAccessory } = this.props;\n\n    if ('function' !== typeof renderAccessory) {\n      return null;\n    }\n\n    return (\n      <View style={styles.accessory}>\n        {renderAccessory()}\n      </View>\n    );\n  }\n\n  renderAffix(type, active, focused) {\n    let {\n      [type]: affix,\n      fontSize,\n      baseColor,\n      animationDuration,\n      affixTextStyle,\n    } = this.props;\n\n    if (null == affix) {\n      return null;\n    }\n\n    let props = {\n      type,\n      active,\n      focused,\n      fontSize,\n      baseColor,\n      animationDuration,\n    };\n\n    return (\n      <Affix style={affixTextStyle} {...props}>{affix}</Affix>\n    );\n  }\n\n  render() {\n    let { receivedFocus, focus, focused, error, errored, height, text = '' } = this.state;\n    let {\n      style: inputStyleOverrides,\n      label,\n      title,\n      value,\n      defaultValue,\n      characterRestriction: limit,\n      editable,\n      disabled,\n      disabledLineType,\n      disabledLineWidth,\n      animationDuration,\n      fontSize,\n      titleFontSize,\n      labelFontSize,\n      labelHeight,\n      labelPadding,\n      inputContainerPadding,\n      labelTextStyle,\n      titleTextStyle,\n      tintColor,\n      baseColor,\n      textColor,\n      errorColor,\n      lineWidth,\n      activeLineWidth,\n      containerStyle,\n      inputContainerStyle: inputContainerStyleOverrides,\n      clearTextOnFocus,\n      ...props\n    } = this.props;\n\n    if (props.multiline && props.height) {\n      /* Disable autogrow if height is passed as prop */\n      height = props.height;\n    }\n\n    let defaultVisible = !(receivedFocus || null != value || null == defaultValue);\n\n    value = defaultVisible?\n      defaultValue:\n      text;\n\n    let active = !!(value || props.placeholder);\n    let count = value.length;\n    let restricted = limit < count;\n\n    let textAlign = I18nManager.isRTL?\n      'right':\n      'left';\n\n    let borderBottomColor = restricted?\n      errorColor:\n      focus.interpolate({\n        inputRange: [-1, 0, 1],\n        outputRange: [errorColor, baseColor, tintColor],\n      });\n\n    let borderBottomWidth = restricted?\n      activeLineWidth:\n      focus.interpolate({\n        inputRange: [-1, 0, 1],\n        outputRange: [activeLineWidth, lineWidth, activeLineWidth],\n      });\n\n    let inputContainerStyle = {\n      paddingTop: labelHeight,\n      paddingBottom: inputContainerPadding,\n\n      ...(disabled?\n        { overflow: 'hidden' }:\n        { borderBottomColor, borderBottomWidth }),\n\n      ...(props.multiline?\n        { height: 'web' === Platform.OS ? 'auto' : labelHeight + inputContainerPadding + height }:\n        { height: labelHeight + inputContainerPadding + fontSize * 1.5 }),\n    };\n\n    let inputStyle = {\n      fontSize,\n      textAlign,\n\n      color: (disabled || defaultVisible)?\n        baseColor:\n        textColor,\n\n      ...(props.multiline?\n        {\n          height: fontSize * 1.5 + height,\n\n          ...Platform.select({\n            ios: { top: -1 },\n            android: { textAlignVertical: 'top' },\n          }),\n        }:\n        { height: fontSize * 1.5 }),\n    };\n\n    let errorStyle = {\n      color: errorColor,\n\n      opacity: focus.interpolate({\n        inputRange: [-1, 0, 1],\n        outputRange: [1, 0, 0],\n      }),\n\n      fontSize: title?\n        titleFontSize:\n        focus.interpolate({\n          inputRange:  [-1, 0, 1],\n          outputRange: [titleFontSize, 0, 0],\n        }),\n    };\n\n    let titleStyle = {\n      color: baseColor,\n\n      opacity: focus.interpolate({\n        inputRange: [-1, 0, 1],\n        outputRange: [0, 1, 1],\n      }),\n\n      fontSize: titleFontSize,\n    };\n\n    let helperContainerStyle = {\n      flexDirection: 'row',\n      height: (title || limit)?\n        titleFontSize * 2:\n        focus.interpolate({\n          inputRange:  [-1, 0, 1],\n          outputRange: [titleFontSize * 2, 8, 8],\n        }),\n    };\n\n    let containerProps = {\n      style: containerStyle,\n      onStartShouldSetResponder: () => true,\n      onResponderRelease: this.onPress,\n      pointerEvents: !disabled && editable?\n        'auto':\n        'none',\n    };\n\n    let inputContainerProps = {\n      style: [\n        styles.inputContainer,\n        inputContainerStyle,\n        inputContainerStyleOverrides,\n      ],\n    };\n\n    let lineProps = {\n      type: disabledLineType,\n      width: disabledLineWidth,\n      color: baseColor,\n    };\n\n    let labelProps = {\n      baseSize: labelHeight,\n      basePadding: labelPadding,\n      fontSize,\n      activeFontSize: labelFontSize,\n      tintColor,\n      baseColor,\n      errorColor,\n      animationDuration,\n      active,\n      focused,\n      errored,\n      restricted,\n      style: labelTextStyle,\n    };\n\n    let counterProps = {\n      baseColor,\n      errorColor,\n      count,\n      limit,\n      fontSize: titleFontSize,\n      style: titleTextStyle,\n    };\n\n    return (\n      <View {...containerProps}>\n        <Animated.View {...inputContainerProps}>\n          {disabled && <Line {...lineProps} />}\n\n          <Label {...labelProps}>{label}</Label>\n\n          <View style={styles.row}>\n            {this.renderAffix('prefix', active, focused)}\n\n            <TextInput\n              style={[styles.input, inputStyle, inputStyleOverrides]}\n              selectionColor={tintColor}\n\n              {...props}\n\n              editable={!disabled && editable}\n              onChange={this.onChange}\n              onChangeText={this.onChangeText}\n              onContentSizeChange={this.onContentSizeChange}\n              onFocus={this.onFocus}\n              onBlur={this.onBlur}\n              value={value}\n              ref={this.updateRef}\n            />\n\n            {this.renderAffix('suffix', active, focused)}\n            {this.renderAccessory()}\n          </View>\n        </Animated.View>\n\n        <Animated.View style={helperContainerStyle}>\n          <View style={styles.flex}>\n            <Helper style={[errorStyle, titleTextStyle]}>{error}</Helper>\n            <Helper style={[titleStyle, titleTextStyle]}>{title}</Helper>\n          </View>\n\n          <Counter {...counterProps} />\n        </Animated.View>\n      </View>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"script"}