{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _react = _interopRequireWildcard(require(\"react\"));\n\nvar _reactNative = require(\"react-native\");\n\nvar _button = _interopRequireDefault(require(\"../button\"));\n\nvar _styles = require(\"./styles\");\n\nvar _jsxFileName = \"E:\\\\Vijay_S\\\\Paresh\\\\ReactNativeApp\\\\node_modules\\\\react-native-material-buttons\\\\src\\\\components\\\\text-button\\\\index.js\";\nvar _excluded = [\"title\", \"titleColor\", \"titleStyle\", \"disabledTitleColor\", \"style\"];\n\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\n\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nvar TextButton = function (_PureComponent) {\n  (0, _inherits2.default)(TextButton, _PureComponent);\n\n  var _super = _createSuper(TextButton);\n\n  function TextButton() {\n    (0, _classCallCheck2.default)(this, TextButton);\n    return _super.apply(this, arguments);\n  }\n\n  (0, _createClass2.default)(TextButton, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          title = _this$props.title,\n          titleColor = _this$props.titleColor,\n          titleStyle = _this$props.titleStyle,\n          disabledTitleColor = _this$props.disabledTitleColor,\n          style = _this$props.style,\n          props = (0, _objectWithoutProperties2.default)(_this$props, _excluded);\n      var titleStyleOverrides = {\n        color: props.disabled ? disabledTitleColor : titleColor\n      };\n      return _react.default.createElement(_button.default, (0, _extends2.default)({\n        style: [_styles.styles.container, style],\n        shadeColor: titleColor,\n        rippleColor: titleColor\n      }, props, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 7\n        }\n      }), _react.default.createElement(_reactNative.Text, {\n        style: [_styles.styles.title, titleStyle, titleStyleOverrides],\n        numberOfLines: 1,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 9\n        }\n      }, String(title).toUpperCase()));\n    }\n  }]);\n  return TextButton;\n}(_react.PureComponent);\n\nexports.default = TextButton;\nTextButton.defaultProps = {\n  color: 'transparent',\n  disabledColor: 'transparent',\n  titleColor: 'rgb(0, 0, 0)',\n  disabledTitleColor: 'rgba(0, 0, 0, .26)',\n  shadeOpacity: 0.20\n};\nTextButton.propTypes = (0, _extends2.default)({}, _button.default.propTypes, {\n  title: _propTypes.default.string.isRequired,\n  titleColor: _propTypes.default.string,\n  titleStyle: _reactNative.Text.propTypes.style,\n  disabledTitleColor: _propTypes.default.string\n});","map":{"version":3,"sources":["E:/Vijay_S/Paresh/ReactNativeApp/node_modules/react-native-material-buttons/src/components/text-button/index.js"],"names":["TextButton","props","title","titleColor","titleStyle","disabledTitleColor","style","titleStyleOverrides","color","disabled","styles","container","String","toUpperCase","PureComponent","defaultProps","disabledColor","shadeOpacity","propTypes","Button","PropTypes","string","isRequired","Text"],"mappings":";;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;;AACA;;AAEA;;AACA;;;;;;;;;;;;;IAEqBA,U;;;;;;;;;;;;WAoBnB,kBAAS;AACP,wBAOI,KAAKC,KAPT;AAAA,UACEC,KADF,eACEA,KADF;AAAA,UAEEC,UAFF,eAEEA,UAFF;AAAA,UAGEC,UAHF,eAGEA,UAHF;AAAA,UAIEC,kBAJF,eAIEA,kBAJF;AAAA,UAKEC,KALF,eAKEA,KALF;AAAA,UAMKL,KANL;AASA,UAAIM,mBAAmB,GAAG;AACxBC,QAAAA,KAAK,EAAEP,KAAK,CAACQ,QAAN,GACLJ,kBADK,GAELF;AAHsB,OAA1B;AAMA,aACE,6BAAC,eAAD;AACE,QAAA,KAAK,EAAE,CAACO,eAAOC,SAAR,EAAmBL,KAAnB,CADT;AAEE,QAAA,UAAU,EAAEH,UAFd;AAGE,QAAA,WAAW,EAAEA;AAHf,SAIMF,KAJN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAME,6BAAC,iBAAD;AACE,QAAA,KAAK,EAAE,CAACS,eAAOR,KAAR,EAAeE,UAAf,EAA2BG,mBAA3B,CADT;AAEE,QAAA,aAAa,EAAE,CAFjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAIGK,MAAM,CAACV,KAAD,CAAN,CAAcW,WAAd,EAJH,CANF,CADF;AAeD;;;EAnDqCC,oB;;;AAAnBd,U,CACZe,Y,GAAe;AACpBP,EAAAA,KAAK,EAAE,aADa;AAEpBQ,EAAAA,aAAa,EAAE,aAFK;AAIpBb,EAAAA,UAAU,EAAE,cAJQ;AAKpBE,EAAAA,kBAAkB,EAAE,oBALA;AAOpBY,EAAAA,YAAY,EAAE;AAPM,C;AADHjB,U,CAWZkB,S,8BACFC,gBAAOD,S;AAEVhB,EAAAA,KAAK,EAAEkB,mBAAUC,MAAV,CAAiBC,U;AACxBnB,EAAAA,UAAU,EAAEiB,mBAAUC,M;AACtBjB,EAAAA,UAAU,EAAEmB,kBAAKL,SAAL,CAAeZ,K;AAC3BD,EAAAA,kBAAkB,EAAEe,mBAAUC","sourcesContent":["import PropTypes from 'prop-types';\nimport React, { PureComponent } from 'react';\nimport { Text } from 'react-native';\n\nimport Button from '../button';\nimport { styles } from './styles';\n\nexport default class TextButton extends PureComponent {\n  static defaultProps = {\n    color: 'transparent',\n    disabledColor: 'transparent',\n\n    titleColor: 'rgb(0, 0, 0)',\n    disabledTitleColor: 'rgba(0, 0, 0, .26)',\n\n    shadeOpacity: 0.20,\n  };\n\n  static propTypes = {\n    ...Button.propTypes,\n\n    title: PropTypes.string.isRequired,\n    titleColor: PropTypes.string,\n    titleStyle: Text.propTypes.style,\n    disabledTitleColor: PropTypes.string,\n  };\n\n  render() {\n    let {\n      title,\n      titleColor,\n      titleStyle,\n      disabledTitleColor,\n      style,\n      ...props\n    } = this.props;\n\n    let titleStyleOverrides = {\n      color: props.disabled?\n        disabledTitleColor:\n        titleColor,\n    };\n\n    return (\n      <Button\n        style={[styles.container, style]}\n        shadeColor={titleColor}\n        rippleColor={titleColor}\n        {...props}\n      >\n        <Text\n          style={[styles.title, titleStyle, titleStyleOverrides]}\n          numberOfLines={1}\n        >\n          {String(title).toUpperCase()}\n        </Text>\n      </Button>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"script"}